Description: >
  This template deploys an ECS cluster, with a task definition, service, and load balancer.

Parameters:
  ProjectName:
    Description: The name of the project
    Type: String
    Default: ecs-poc

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: dev

  ServiceName:
    Description: Service name
    Type: String
    Default: simple-web-application

  Image:
    Description: Docker image
    Type: String
    Default: 499249761013.dkr.ecr.us-east-1.amazonaws.com/ecs-poc:v1.0.15

  ContainerPort:
    Description: Container port
    Type: Number
    Default: 8081

  HealthCheckPath:
    Description: Health check path
    Type: String
    Default: /health

  MinContainers:
    Description: Minimum number of containers
    Type: Number
    Default: 1

  MaxContainers:
    Description: Maximum number of containers
    Type: Number
    Default: 2

  AutoScalingTargetValue:
    Description: Target CPU utilization for autoscaling
    Type: Number
    Default: 60

  DomainName:
    Description: Domain name
    Type: String
    Default: poc.krishanshamod.com

  CertificateARN:
    Description: Certificate ARN
    Type: String
    Default: arn:aws:acm:us-east-1:499249761013:certificate/c5385dc2-62c6-4b0b-be96-6c1eb69cbfad

  NewRelicSecretARN:
    Description: New Relic license key secret ARN Exported Name from New Relic Integration Stack
    Type: String
    Default: ecs-poc-dev-new-relic-secret-arn

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${EnvironmentName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-cluster
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - LogGroup
      - AppSecret
    Properties:
      Family: !Sub ${ServiceName}-${EnvironmentName}-task-definition
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 256
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # Secrets:
          #   - Name: HOST
          #     ValueFrom: !Sub "${AppSecret}:HOST::"
          #   - Name: NODE_ENV
          #     ValueFrom: !Sub "${AppSecret}:NODE_ENV::"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
        # - Name: newrelic-infra
        #   Image: newrelic/nri-ecs:1.11.0
        #   Environment:
        #     - Name: NRIA_OVERRIDE_HOST_ROOT
        #       Value: ""
        #     - Name: NRIA_IS_FORWARD_ONLY
        #       Value: "true"
        #     - Name: FARGATE
        #       Value: "true"
        #     - Name: NRIA_PASSTHROUGH_ENVIRONMENT
        #       Value: "ECS_CONTAINER_METADATA_URI,ECS_CONTAINER_METADATA_URI_V4,FARGATE"
        #     - Name: NRIA_CUSTOM_ATTRIBUTES
        #       Value: "{\"nrDeployMethod\":\"downloadPage\"}"
        #   Secrets:
        #     - Name: NRIA_LICENSE_KEY
        #       ValueFrom: !Sub "${AppSecret}:NEW_RELIC_LICENSE_KEY::"
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${EnvironmentName}-task-definition
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Service
          Value: !Ref ServiceName
        - Key: Cluster
          Value: !Ref Cluster

  AppSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${ServiceName}-${EnvironmentName}-app-secret
      Description: "This secret stores the app secrets"
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${EnvironmentName}-app-secret
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: SecretsManagerGetSecretValue
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref AppSecret
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-execution-role
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-autoscaling-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-execution-role
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ServiceName}-task-definition"
      RetentionInDays: 30
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-log-group
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTP
      - ListenerHTTPS
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 30
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-private-subnet-1"
            - Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-private-subnet-2"
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Ref ServiceName
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${EnvironmentName}-lb
      Type: application
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-public-subnet-1"
        - Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-public-subnet-2"
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-lb
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateARN
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ListenerHTTPS
      Priority: 100
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref DomainName
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ServiceName}-${EnvironmentName}-tg
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-vpc"
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${EnvironmentName}-tg
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ProjectName}-${EnvironmentName}-load-balancer-sg
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-load-balancer-sg
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${ServiceName}-${EnvironmentName}-container-sg
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-${EnvironmentName}-vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-${EnvironmentName}-container-sg
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ["/", [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ["", [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue

  WebApplicationFirewall:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${ProjectName}-${EnvironmentName}-waf
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub ${ProjectName}-${EnvironmentName}-waf
      Rules:
        - Name: !Sub ${ProjectName}-${EnvironmentName}-waf-rule
          Priority: 0
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub ${ProjectName}-${EnvironmentName}-waf-rule
          Action:
            Block: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules:
                - Name: SizeRestrictions_BODY
                - Name: SizeRestrictions_HEADERS
                - Name: SizeRestrictions_QUERYSTRINGS
                - Name: SizeRestrictions_COOKIES
                - Name: SizeRestrictions_FILE_UPLOADS
                - Name: SQLi_BODY
                - Name: SQLi_HEADERS
                - Name: SQLi_QUERY_ARGS
                - Name: SQLi_COOKIES
                - Name: XSS_BODY
                - Name: XSS_HEADERS
                - Name: XSS_QUERY_ARGS
                - Name: XSS_COOKIES
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-waf
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref EnvironmentName

  WebApplicationFirewallAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLArn: !Ref WebApplicationFirewall

Outputs:
  LoadBalancerURL:
    Description: The URL of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${ProjectName}-${EnvironmentName}-load-balancer-url
